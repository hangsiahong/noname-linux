--- gcc-6.3.0/libstdc++-v3/config/locale/generic/c_locale.cc
+++ gcc-6.3.0/libstdc++-v3/config/locale/generic/c_locale.cc
@@ -218,27 +218,44 @@
 
   void
   locale::facet::_S_create_c_locale(__c_locale& __cloc, const char* __s,
-				    __c_locale)
+				    __c_locale __old)
   {
-    // Currently, the generic model only supports the "C" locale.
-    // See http://gcc.gnu.org/ml/libstdc++/2003-02/msg00345.html
-    __cloc = 0;
-    if (strcmp(__s, "C"))
-      __throw_runtime_error(__N("locale::facet::_S_create_c_locale "
-			    "name not valid"));
+    __cloc = newlocale(LC_ALL_MASK, __s, __old);
+    if (!__cloc)
+      {
+	// This named locale is not supported by the underlying OS.
+	__throw_runtime_error(__N("locale::facet::_S_create_c_locale "
+				  "name not valid"));
+      }
   }
 
   void
   locale::facet::_S_destroy_c_locale(__c_locale& __cloc)
-  { __cloc = 0; }
+  { 
+    if (__cloc && _S_get_c_locale() != __cloc)
+      freelocale(__cloc); 
+  }
 
   __c_locale
-  locale::facet::_S_clone_c_locale(__c_locale&) throw()
-  { return __c_locale(); }
+  locale::facet::_S_clone_c_locale(__c_locale& __cloc) throw()
+  { return duplocale(__cloc); }
 
   __c_locale
-  locale::facet::_S_lc_ctype_c_locale(__c_locale, const char*)
-  { return __c_locale(); }
+  locale::facet::_S_lc_ctype_c_locale(__c_locale __cloc, const char* __s)
+  {
+    __c_locale __dup = duplocale(__cloc);
+    if (__dup == __c_locale(0))
+      __throw_runtime_error(__N("locale::facet::_S_lc_ctype_c_locale "
+				"duplocale error"));
+    __c_locale __changed = newlocale(LC_CTYPE_MASK, __s, __dup);
+    if (__changed == __c_locale(0))
+      {
+	freelocale(__dup);
+	__throw_runtime_error(__N("locale::facet::_S_lc_ctype_c_locale "
+				  "newlocale error"));
+      }
+    return __changed;
+  }
 
 _GLIBCXX_END_NAMESPACE_VERSION
 } // namespace
--- gcc-6.3.0/libstdc++-v3/config/locale/generic/c_locale.h
+++ gcc-6.3.0/libstdc++-v3/config/locale/generic/c_locale.h
@@ -46,7 +46,7 @@
 {
 _GLIBCXX_BEGIN_NAMESPACE_VERSION
 
-  typedef int*			__c_locale;
+  typedef locale_t		__c_locale;
 
   // Convert numeric value of type double and long double to string and
   // return length of string.  If vsnprintf is available use it, otherwise
