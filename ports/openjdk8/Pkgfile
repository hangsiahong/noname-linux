desc="OpenJDK 8 provided by IcedTea"
makedeps=["unzip", "zip"]
nostrip=true
deps=["unzip", "zip"]
_java_ver="8"
_jdk_update="252"
_jdk_build="09"
version="$_java_ver.$_jdk_update.$_jdk_build"
_repo_ver="jdk${_java_ver}u${_jdk_update}-b${_jdk_build}"
_prefix="jdk8u-${_repo_ver}/image"
_jvmdir="/lib/jvm/java-8-openjdk"
_imgdir="${_prefix}/jvm/openjdk-1.8.0_$(printf '%.2d' ${_jdk_update})"
_url_src="http://hg.openjdk.java.net/jdk8u/jdk8u"
source=[
	{name="openjdk7.tar.gz", url="http://dl-2.alpinelinux.org/alpine/v3.10/community/x86_64/openjdk7-7.221.2.6.18-r0.apk"},
	{name="openjdk7-jre.tar.gz", url="http://dl-2.alpinelinux.org/alpine/v3.10/community/x86_64/openjdk7-jre-7.221.2.6.18-r0.apk"},
	{name="openjdk7-jre-base.tar.gz", url="http://dl-2.alpinelinux.org/alpine/v3.10/community/x86_64/openjdk7-jre-base-7.221.2.6.18-r0.apk"},
	{name="openjdk7-jre-lib.tar.gz", url="http://dl-2.alpinelinux.org/alpine/v3.10/community/x86_64/openjdk7-jre-lib-7.221.2.6.18-r0.apk"},
	{name="jdk8u-${_repo_ver}.tar.gz", url="${_url_src}/archive/${_repo_ver}.tar.gz"},
	{name="corba-${_repo_ver}.tar.gz", url="${_url_src}/corba/archive/${_repo_ver}.tar.gz"},
	{name="hotspot-${_repo_ver}.tar.gz", url="${_url_src}/hotspot/archive/${_repo_ver}.tar.gz"},
	{name="jdk-${_repo_ver}.tar.gz", url="${_url_src}/jdk/archive/${_repo_ver}.tar.gz"},
	{name="jaxws-${_repo_ver}.tar.gz", url="${_url_src}/jaxws/archive/${_repo_ver}.tar.gz"},
	{name="jaxp-${_repo_ver}.tar.gz", url="${_url_src}/jaxp/archive/${_repo_ver}.tar.gz"},
	{name="langtools-${_repo_ver}.tar.gz", url="${_url_src}/langtools/archive/${_repo_ver}.tar.gz"},
	{name="nashorn-${_repo_ver}.tar.gz", url="${_url_src}/nashorn/archive/${_repo_ver}.tar.gz"},
	{url="mkcacerts"},
	{url="jdk8.sh"},
	{url="icedtea-hotspot-musl.patch"},
	{url="icedtea-hotspot-noagent-musl.patch"},
	{url="icedtea-jdk-execinfo.patch"},
	{url="icedtea-jdk-fix-ipv6-init.patch"},
	{url="icedtea-jdk-fix-libjvm-load.patch"},
	{url="icedtea-jdk-includes.patch"},
	{url="icedtea-jdk-musl.patch"},
	{url="openjdk8-no-unused-deps.patch"},
	{url="openjdk8-no-genx11-in-headless.patch"},
	{url="jdk8_no_unused.patch"},
]

ext='''
	cd jdk8u-${_repo_ver}
  for subrepo in corba hotspot jdk jaxws jaxp langtools nashorn; do
    mv ../${subrepo}-${_repo_ver} ${subrepo}
  done

	for i in $source; do
		echo $i
		case $i in
			*-no-*.patch) patch -p0 -i "$srcdir"/$i ;;
			*.patch) patch -p1 -i "$srcdir"/$i ;;
		esac
	done

	find jdk/src/solaris/classes/sun/awt/X11 -maxdepth 1 -name '*.java' -delete
'''

build='''
	cd jdk8u-${_repo_ver}

	unset JAVA_HOME
  export MAKEFLAGS=${MAKEFLAGS##-j*}
  export CFLAGS="${CFLAGS} -Wno-error=deprecated-declarations -Wno-error=stringop-overflow= -Wno-error=return-type -Wno-error=cpp -fno-lifetime-dse -fno-delete-null-pointer-checks -fcommon"

  install -d -m 755 "${srcdir}/${_prefix}/"

	chmod +x configure

  ALSA_NOT_NEEDED=yes \
	X11_NOT_NEEDED=yes \
	CUPS_NOT_NEEDED=yes \
	PULSE_NOT_NEEDED=yes \
	./configure \
    --prefix="${srcdir}/${_prefix}" \
    --with-update-version="${_jdk_update}" \
    --with-build-number="b${_jdk_build}" \
    --with-milestone="fcs" \
		--disable-precompiled-headers \
    --enable-unlimited-crypto \
    --enable-ccache \
    --with-zlib=system \
    --without-x \
    --without-cups \
	  --disable-freetype-bundling \
	  --enable-headful \
	  --with-boot-jdk="../usr/lib/jvm/java-1.7-openjdk" \
    --with-extra-cflags="${CFLAGS}" \
    --with-extra-cxxflags="${CXXFLAGS}" \
    --with-extra-ldflags="${LDFLAGS}"

  ALSA_NOT_NEEDED=yes \
	X11_NOT_NEEDED=yes \
	CUPS_NOT_NEEDED=yes \
	PULSE_NOT_NEEDED=yes \
  make BUILD_SOUNDLESS_ONLY=1 BUILD_HEADLESS_ONLY=1
  ALSA_NOT_NEEDED=yes \
	X11_NOT_NEEDED=yes \
	CUPS_NOT_NEEDED=yes \
	PULSE_NOT_NEEDED=yes \
  make BUILD_SOUNDLESS_ONLY=1 BUILD_HEADLESS_ONLY=1 install

	cd ../${_imgdir}

	find . -iname '*.jar' -exec chmod ugo+r {} \;
  chmod ugo+r lib/ct.sym
  find . -iname '*.diz' -exec rm {} \;
  find . -iname '*.debuginfo' -exec rm {} \;

	cd jre

  install -d -m 755 "${pkgdir}${_jvmdir}/jre/"
  cp -a bin lib "${pkgdir}${_jvmdir}/jre"

  # Set config files
  mv "${pkgdir}${_jvmdir}"/jre/lib/management/jmxremote.password.template "${pkgdir}${_jvmdir}"/jre/lib/management/jmxremote.password
  mv "${pkgdir}${_jvmdir}"/jre/lib/management/snmp.acl.template "${pkgdir}${_jvmdir}"/jre/lib/management/snmp.acl

  # Man pages
  cd "${pkgdir}${_jvmdir}/jre/bin"
  install -d -m 755 "${pkgdir}"/share/man/man1/
  for file in *; do
    if [ -f "${srcdir}/${_imgdir}/man/man1/${file}.1" ]; then
      install -m 644 "${srcdir}/${_imgdir}/man/man1/${file}.1" "${pkgdir}/share/man/man1/${file}-${_jdkname}.1"
    fi
  done
	cd -

  # Link JKS keystore from ca-certificates-utils
	install -D -m 755 "$srcdir"/mkcacerts "${pkgdir}${_jvmdir}"/jre/bin
	sh "$srcdir"/mkcacerts \
		-d "/share/ca-certificates/" \
		-s "/bin/openssl"  \
		-k "${pkgdir}${_jvmdir}/jre/bin/keytool" \
		-o "${pkgdir}${_jvmdir}/jre/lib/security/cacerts"

  cd ..

  # Main files
  install -d -m 755 "${pkgdir}${_jvmdir}/bin"
  cp -a include lib "${pkgdir}${_jvmdir}"

  cd bin
  for b in $(ls | grep -v java-rmi.cgi); do
    if [ -e ../jre/bin/${b} ]; then
      ln -s ../jre/bin/${b} "${pkgdir}${_jvmdir}/bin/${b}"
    else
      install -D -m 755 ${b} "${pkgdir}${_jvmdir}/bin/${b}"
      if [ -f "../man/man1/${b}.1" ]; then
        install -D -m 644 ../man/man1/${b}.1 "${pkgdir}/share/man/man1/${b}-${_jdkname}.1"
      fi
    fi
  done
  cd -

  # Handling 'java-rmi.cgi' separately
  install -D -m 755 bin/java-rmi.cgi "${pkgdir}${_jvmdir}/bin/java-rmi.cgi"

  install -D -m 755 "$srcdir"/jdk8.sh "${pkgdir}/etc/profile.d/jdk8.sh"
'''
