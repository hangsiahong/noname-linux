--- widget/gtk/DMABufLibWrapper.cpp	2020-10-21 05:25:30.000000000 +0800
+++ widget/gtk/DMABufLibWrapper.cpp	2020-10-21 05:25:30.000000000 +0800
@@ -12,7 +12,9 @@
 #include "mozilla/gfx/gfxVars.h"
 
 #include <gdk/gdk.h>
+#ifdef MOZ_X11
 #include <gdk/gdkx.h>
+#endif
 
 #include <sys/types.h>
 #include <sys/stat.h>
--- widget/gtk/mozgtk/moz.build	2020-01-18 05:35:31.000000000 +0800
+++ widget/gtk/mozgtk/moz.build	2020-01-18 05:35:31.000000000 +0800
@@ -4,4 +4,4 @@
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
-DIRS += ["stub", "gtk2", "gtk3"]
+DIRS += ["stub", "gtk3"]

--- dom/moz.build	2020-01-18 05:34:16.000000000 +0800
+++ dom/moz.build	2020-01-18 05:34:16.000000000 +0800
@@ -118,7 +118,7 @@
     "imptests",
 ]
 
-if CONFIG["MOZ_WIDGET_TOOLKIT"] in ("gtk", "cocoa", "windows"):
+if CONFIG["MOZ_WIDGET_TOOLKIT"] in ("cocoa", "windows"):
     TEST_DIRS += ["plugins/test"]
 
 SPHINX_TREES["/dom"] = "docs"
--- media/ffvpx/config_unix64.h	2020-01-18 05:34:42.000000000 +0800
+++ media/ffvpx/config_unix64.h	2020-01-18 05:34:42.000000000 +0800
@@ -213,7 +213,9 @@
 #define HAVE_ES2_GL_H 0
 #define HAVE_GSM_H 0
 #define HAVE_IO_H 0
+#ifndef HAVE_LINUX_PERF_EVENT_H
 #define HAVE_LINUX_PERF_EVENT_H 0
+#endif
 #define HAVE_MACHINE_IOCTL_BT848_H 0
 #define HAVE_MACHINE_IOCTL_METEOR_H 0
 #define HAVE_OPENCV2_CORE_CORE_C_H 0
--- dom/plugins/ipc/PluginMessageUtils.h	2020-01-30 23:08:26.832756794 +0800
+++ dom/plugins/ipc/PluginMessageUtils.h	2020-01-30 23:08:26.832756794 +0800
@@ -118,7 +118,7 @@
 #elif defined(XP_DARWIN) || defined(ANDROID)
 typedef intptr_t NativeWindowHandle;  // never actually used, will always be 0
 #else
-#  error Need NativeWindowHandle for this platform
+typedef intptr_t NativeWindowHandle;
 #endif
 
 #ifdef XP_WIN
--- gfx/thebes/gfxPlatformGtk.cpp	2020-01-18 05:34:25.000000000 +0800
+++ gfx/thebes/gfxPlatformGtk.cpp	2020-01-18 05:34:25.000000000 +0800
@@ -120,9 +120,11 @@
 }
 
 void gfxPlatformGtk::FlushContentDrawing() {
+#ifdef MOZ_X11
   if (gfxVars::UseXRender()) {
     XFlush(DefaultXDisplay());
   }
+#endif
 }
 
 void gfxPlatformGtk::InitPlatformGPUProcessPrefs() {
--- gfx/layers/ipc/CompositorBridgeParent.cpp	2020-01-18 05:34:21.000000000 +0800
+++ gfx/layers/ipc/CompositorBridgeParent.cpp	2020-01-18 05:34:21.000000000 +0800
@@ -71,9 +71,9 @@
 #include "mozilla/PerfStats.h"
 #include "mozilla/PodOperations.h"
 #include "mozilla/Telemetry.h"
-#ifdef MOZ_WIDGET_GTK
+#if defined(MOZ_WIDGET_GTK) && defined(MOZ_X11)
 #  include "basic/X11BasicCompositor.h"  // for X11BasicCompositor
 #endif
 #include "nsCOMPtr.h"         // for already_AddRefed
 #include "nsDebug.h"          // for NS_ASSERTION, etc
 #include "nsISupportsImpl.h"  // for MOZ_COUNT_CTOR, etc
@@ -1513,11 +1510,11 @@
           new CompositorOGL(this, mWidget, mEGLSurfaceSize.width,
                             mEGLSurfaceSize.height, mUseExternalSurfaceSize);
     } else if (aBackendHints[i] == LayersBackend::LAYERS_BASIC) {
-#ifdef MOZ_WIDGET_GTK
+#if defined(MOZ_WIDGET_GTK) && defined(MOZ_X11)
       if (gfxVars::UseXRender()) {
         compositor = new X11BasicCompositor(this, mWidget);
       } else
 #endif
       {
         compositor = new BasicCompositor(this, mWidget);
       }
--- dom/plugins/ipc/PluginInstanceChild.cpp	2020-02-03 18:08:50.357034557 +0800
+++ dom/plugins/ipc/PluginInstanceChild.cpp	2020-02-03 18:08:50.357034557 +0800
@@ -1251,8 +1251,6 @@
   // TODO: Need Android impl
 #elif defined(MOZ_WIDGET_UIKIT)
   // Don't care
-#else
-#  error Implement me for your OS
 #endif
 
   return IPC_OK();
--- dom/plugins/ipc/PluginInstanceParent.cpp	2020-02-03 18:54:33.407636895 +0800
+++ dom/plugins/ipc/PluginInstanceParent.cpp	2020-02-03 18:54:33.407636895 +0800
@@ -232,7 +232,7 @@
   // TODO: Need Android impl
   int id;
 #else
-#  warning Implement me
+  int id;
 #endif
 
   *result = mNPNIface->getvalue(mNPP, NPNVnetscapeWindow, &id);
--- widget/gtk/nsWindow.h	2020-01-18 05:35:31.000000000 +0800
+++ widget/gtk/nsWindow.h	2020-01-18 05:35:31.000000000 +0800
@@ -84,7 +84,9 @@
 
 namespace mozilla {
 class TimeStamp;
+#ifdef MOZ_X11
 class CurrentX11TimeGetter;
+#endif
 
 }  // namespace mozilla
 
@@ -297,7 +297,9 @@
 
   WidgetEventTime GetWidgetEventTime(guint32 aEventTime);
   mozilla::TimeStamp GetEventTimeStamp(guint32 aEventTime);
+#ifdef MOZ_X11
   mozilla::CurrentX11TimeGetter* GetCurrentTimeGetter();
+#endif
 
   virtual void SetInputContext(const InputContext& aContext,
                                const InputContextAction& aAction) override;
@@ -528,9 +528,9 @@
   Window mXWindow;
   Visual* mXVisual;
   int mXDepth;
-  mozilla::widget::WindowSurfaceProvider mSurfaceProvider;
 #endif
 #ifdef MOZ_WAYLAND
+  mozilla::widget::WindowSurfaceProvider mSurfaceProvider;
   RefPtr<mozilla::gfx::VsyncSource> mWaylandVsyncSource;
 #endif
 
@@ -673,7 +673,9 @@
    */
   RefPtr<mozilla::widget::IMContextWrapper> mIMContext;
 
+#ifdef MOZ_X11
   mozilla::UniquePtr<mozilla::CurrentX11TimeGetter> mCurrentTimeGetter;
+#endif
   static CSDSupportLevel sCSDSupportLevel;
 };
 
--- widget/gtk/WindowSurfaceProvider.h	2020-01-18 05:35:31.000000000 +0800
+++ widget/gtk/WindowSurfaceProvider.h	2020-01-18 05:35:31.000000000 +0800
@@ -16,8 +16,10 @@
 #ifdef MOZ_WAYLAND
 #  include <gdk/gdkwayland.h>
 #endif
+#ifdef MOZ_X11
 #include <X11/Xlib.h>  // for Window, Display, Visual, etc.
 #include "X11UndefineNone.h"
+#endif
 
 class nsWindow;
 
@@ -39,8 +41,10 @@
    * own the Display, Window, etc, and they must continue to exist
    * while WindowSurfaceProvider is used.
    */
+#ifdef MOZ_X11
   void Initialize(Display* aDisplay, Window aWindow, Visual* aVisual,
                   int aDepth, bool aIsShaped);
+#endif
 
 #ifdef MOZ_WAYLAND
   void Initialize(nsWindow* aWidget);
@@ -63,10 +67,12 @@
 
   // Can we access X?
   bool mIsX11Display;
+#ifdef MOZ_X11
   Display* mXDisplay;
   Window mXWindow;
   Visual* mXVisual;
   int mXDepth;
+#endif
   UniquePtr<WindowSurface> mWindowSurface;
 #ifdef MOZ_WAYLAND
   nsWindow* mWidget;
--- widget/gtk/nsGtkKeyUtils.h.orig	2020-01-18 05:35:31.000000000 +0800
+++ widget/gtk/nsGtkKeyUtils.h	2020-02-04 10:48:13.970757807 +0800
@@ -12,7 +12,9 @@
 #include "mozilla/EventForwards.h"
 
 #include <gdk/gdk.h>
+#ifdef MOZ_X11
 #include <X11/XKBlib.h>
+#endif
 #ifdef MOZ_WAYLAND
 #  include <gdk/gdkwayland.h>
 #  include <xkbcommon/xkbcommon.h>
@@ -301,6 +303,7 @@
    */
   int mXKBBaseEventCode;
 
+#ifdef MOZ_X11
   /**
    * Only auto_repeats[] stores valid value.  If you need to use other
    * members, you need to listen notification events for them.
@@ -308,6 +311,7 @@
    * InitXKBExtension().
    */
   XKeyboardState mKeyboardState;
+#endif
 
   /**
    * Pointer of the singleton instance.
@@ -318,7 +322,7 @@
    * Auto key repeat management.
    */
   static guint sLastRepeatableHardwareKeyCode;
-  static Time sLastRepeatableKeyTime;
+  static GTime sLastRepeatableKeyTime;
   enum RepeatState { NOT_PRESSED, FIRST_PRESS, REPEATING };
   static RepeatState sRepeatState;
 
--- widget/gtk/nsPrintDialogGTK.cpp	2020-01-18 05:35:31.000000000 +0800
+++ widget/gtk/nsPrintDialogGTK.cpp	2020-01-18 05:35:31.000000000 +0800
@@ -27,8 +27,13 @@
 #include "WidgetUtils.h"
 #include "nsIObserverService.h"
 
+#ifdef MOZ_X11
 // for gdk_x11_window_get_xid
 #include <gdk/gdkx.h>
+#endif
+#ifdef MOZ_WAYLAND
+#include <gdk/gdkwayland.h>
+#endif
 #include <sys/types.h>
 #include <sys/stat.h>
 #include <fcntl.h>
@@ -533,6 +538,7 @@
 static gboolean window_export_handle(GtkWindow* window,
                                      GtkWindowHandleExported callback,
                                      gpointer user_data) {
+#ifdef MOZ_X11
   if (gfxPlatformGtk::GetPlatform()->IsX11Display()) {
     GdkWindow* gdk_window = gtk_widget_get_window(GTK_WIDGET(window));
     char* handle_str;
@@ -543,8 +549,9 @@
     g_free(handle_str);
     return true;
   }
+#endif
 #ifdef MOZ_WAYLAND
-  else {
+  if (!gfxPlatformGtk::GetPlatform()->IsX11Display()) {
     GdkWindow* gdk_window = gtk_widget_get_window(GTK_WIDGET(window));
     WaylandWindowHandleExportedData* data;
 
--- toolkit/xre/nsAppRunner.cpp	2020-01-18 05:35:25.000000000 +0800
+++ toolkit/xre/nsAppRunner.cpp	2020-01-18 05:35:25.000000000 +0800
@@ -286,6 +286,7 @@
 #  endif
 #  ifdef MOZ_X11
 #    include <gdk/gdkx.h>
+#    undef None
 #  endif /* MOZ_X11 */
 #  include "nsGTKToolkit.h"
 #  include <fontconfig/fontconfig.h>
@@ -310,9 +311,6 @@
 #  endif
 #endif  // FUZZING
 
-// Undo X11/X.h's definition of None
-#undef None
-
 namespace mozilla {
 int (*RunGTest)(int*, char**) = 0;
 }  // namespace mozilla
--- toolkit/xre/nsGDKErrorHandler.cpp	2020-01-18 05:35:25.000000000 +0800
+++ toolkit/xre/nsGDKErrorHandler.cpp	2020-01-18 05:35:25.000000000 +0800
@@ -6,14 +6,16 @@
 #include "nsGDKErrorHandler.h"
 
 #include <gtk/gtk.h>
-#include <gdk/gdkx.h>
+#include <gdk/gdkwayland.h>
 #include <errno.h>
 #include <stdlib.h>
 #include <string.h>
 
 #include "nsDebug.h"
 #include "nsString.h"
+#ifdef MOZ_X11
 #include "nsX11ErrorHandler.h"
+#endif
 
 #include "prenv.h"
 
@@ -26,6 +30,7 @@
  */
 static void GdkErrorHandler(const gchar* log_domain, GLogLevelFlags log_level,
                             const gchar* message, gpointer user_data) {
+#ifdef MOZ_X11
   if (strstr(message, "X Window System error")) {
     XErrorEvent event;
     nsDependentCString buffer(message);
@@ -92,10 +97,12 @@
     event.resourceid = 0;
 
     X11Error(event.display, &event);
-  } else {
-    g_log_default_handler(log_domain, log_level, message, user_data);
-    MOZ_CRASH_UNSAFE(message);
-  }
+		return;
+ }
+#endif
+
+ g_log_default_handler(log_domain, log_level, message, user_data);
+ MOZ_CRASH_UNSAFE(message);
 }
 
 void InstallGdkErrorHandler() {
@@ -103,7 +110,9 @@
                     (GLogLevelFlags)(G_LOG_LEVEL_ERROR | G_LOG_FLAG_FATAL |
                                      G_LOG_FLAG_RECURSION),
                     GdkErrorHandler, nullptr);
+#ifdef MOZ_X11
   if (PR_GetEnv("MOZ_X_SYNC")) {
     XSynchronize(GDK_DISPLAY_XDISPLAY(gdk_display_get_default()), X11True);
   }
+#endif
 }
--- widget/gtk/nsNativeThemeGTK.cpp	2020-01-18 05:35:31.000000000 +0800
+++ widget/gtk/nsNativeThemeGTK.cpp	2020-01-18 05:35:31.000000000 +0800
@@ -863,7 +863,9 @@
                                const nsIntSize& aDrawSize,
                                GdkRectangle& aGDKRect,
                                nsITheme::Transparency aTransparency) {
+#ifdef MOZ_X11
   bool isX11Display = gfxPlatformGtk::GetPlatform()->IsX11Display();
+#endif
   static auto sCairoSurfaceSetDeviceScalePtr =
       (void (*)(cairo_surface_t*, double, double))dlsym(
           RTLD_DEFAULT, "cairo_surface_set_device_scale");
--- toolkit/xre/nsNativeAppSupportUnix.cpp	2020-01-18 05:35:25.000000000 +0800
+++ toolkit/xre/nsNativeAppSupportUnix.cpp	2020-01-18 05:35:25.000000000 +0800
@@ -404,7 +404,6 @@
   prop.num_vals = numVals;
   prop.vals = vals;
 }
-#endif /* MOZ_X11 */
 
 static void RemoveArg(char** argv) {
   do {
@@ -414,6 +413,7 @@
 
   --gArgc;
 }
+#endif /* MOZ_X11 */
 
 NS_IMETHODIMP
 nsNativeAppSupportUnix::Start(bool* aRetVal) {
--- widget/CompositorWidget.h	2020-01-18 05:35:31.000000000 +0800
+++ widget/CompositorWidget.h	2020-01-18 05:35:31.000000000 +0800
@@ -60,7 +60,7 @@
 };
 
 // Platforms that support out-of-process widgets.
-#if defined(XP_WIN) || defined(MOZ_X11)
+#if defined(XP_WIN) || defined(MOZ_X11) || defined(MOZ_WAYLAND)
 // CompositorWidgetParent should implement CompositorWidget and
 // PCompositorWidgetParent.
 class CompositorWidgetParent;
--- browser/installer/package-manifest.in	2020-01-18 05:34:07.000000000 +0800
+++ browser/installer/package-manifest.in	2020-01-18 05:34:07.000000000 +0800
@@ -100,7 +100,9 @@
 #endif
 #ifdef MOZ_GTK
 @BINPATH@/@DLL_PREFIX@mozgtk@DLL_SUFFIX@
+#ifdef MOZ_X11
 @BINPATH@/gtk2/@DLL_PREFIX@mozgtk@DLL_SUFFIX@
+#endif
 #ifdef MOZ_WAYLAND
 @BINPATH@/@DLL_PREFIX@mozwayland@DLL_SUFFIX@
 #endif
--- widget/gtk/components.conf	2020-01-18 05:35:31.000000000 +0800
+++ widget/gtk/components.conf	2020-01-18 05:35:31.000000000 +0800
@@ -84,7 +84,7 @@
     },
 ]
 
-if defined('MOZ_X11'):
+if defined('MOZ_X11') or defined('MOZ_WAYLAND'):
     Classes += [
         {
             'cid': '{8b5314ba-db01-11d2-96ce-0060b0fb9956}',
--- widget/gtk/nsWidgetFactory.cpp	2020-01-18 05:35:31.000000000 +0800
+++ widget/gtk/nsWidgetFactory.cpp	2020-01-18 05:35:31.000000000 +0800
@@ -20,9 +20,7 @@
 #include "nsHTMLFormatConverter.h"
 #include "HeadlessClipboard.h"
 #include "IMContextWrapper.h"
-#ifdef MOZ_X11
-#  include "nsClipboard.h"
-#endif
+#include "nsClipboard.h"
 #include "TaskbarProgress.h"
 #include "nsFilePicker.h"
 #include "nsSound.h"
@@ -36,7 +34,6 @@
 using namespace mozilla;
 using namespace mozilla::widget;
 
-#ifdef MOZ_X11
 NS_IMPL_COMPONENT_FACTORY(nsIClipboard) {
   nsCOMPtr<nsIClipboard> inst;
   if (gfxPlatform::IsHeadless()) {
@@ -51,7 +48,6 @@
 
   return inst.forget().downcast<nsISupports>();
 }
-#endif
 
 nsresult nsWidgetGtk2ModuleCtor() { return nsAppShellInit(); }
 
--- widget/gtk/nsUserIdleServiceGTK.h	2020-01-18 05:35:31.000000000 +0800
+++ widget/gtk/nsUserIdleServiceGTK.h	2020-01-18 05:35:31.000000000 +0800
@@ -9,10 +9,13 @@
 #define nsUserIdleServiceGTK_h__
 
 #include "nsUserIdleService.h"
+#ifdef MOZ_X11
 #include <X11/Xlib.h>
 #include <X11/Xutil.h>
 #include <gdk/gdkx.h>
+#endif
 
+#ifdef MOZ_X11
 typedef struct {
   Window window;               // Screen saver window
   int state;                   // ScreenSaver(Off,On,Disabled)
@@ -21,6 +24,7 @@
   unsigned long idle;          // milliseconds idle
   unsigned long event_mask;    // event stuff
 } XScreenSaverInfo;
+#endif
 
 class nsUserIdleServiceGTK : public nsUserIdleService {
  public:
@@ -40,7 +44,9 @@
 
  private:
   ~nsUserIdleServiceGTK();
+#ifdef MOZ_X11
   XScreenSaverInfo* mXssInfo;
+#endif
 
  protected:
   nsUserIdleServiceGTK();
--- widget/moz.build.orig	2020-02-04 00:53:25.385598257 +0800
+++ widget/moz.build	2020-02-04 23:31:34.572990195 +0800
@@ -252,13 +252,17 @@
 EXPORTS.ipc = ["nsGUIEventIPC.h"]
 
 if CONFIG["MOZ_X11"]:
-    DIRS += ["x11"]
     SOURCES += [
-        "GfxInfoX11.cpp",
         "nsShmImage.cpp",
         "WindowSurfaceX11SHM.cpp",
     ]
 
+if CONFIG["MOZ_X11"] or CONFIG["MOZ_WAYLAND"]:
+    DIRS += ["x11"] # for keysym2ucs
+    SOURCES += [
+        "GfxInfoX11.cpp",
+    ]
+
 if toolkit == "windows":
     EXPORTS += [
         "PluginWidgetProxy.h",
@@ -311,7 +311,7 @@
         "windows/PCompositorWidget.ipdl",
         "windows/PlatformWidgetTypes.ipdlh",
     ]
-elif CONFIG["MOZ_WIDGET_TOOLKIT"] == "gtk" and CONFIG["MOZ_X11"]:
+elif CONFIG["MOZ_WIDGET_TOOLKIT"] == "gtk":
     IPDL_SOURCES = [
         "gtk/PCompositorWidget.ipdl",
         "gtk/PlatformWidgetTypes.ipdlh",
--- security/sandbox/linux/broker/SandboxBrokerPolicyFactory.cpp	2020-02-06 11:31:38.843267559 +0800
+++ security/sandbox/linux/broker/SandboxBrokerPolicyFactory.cpp	2020-02-06 11:31:38.843267559 +0800
@@ -37,6 +37,9 @@
 #  include <glib.h>
 #  ifdef MOZ_WAYLAND
 #    include <gdk/gdk.h>
+#    include <gdk/gdkwayland.h>
+#  endif
+#  ifdef MOZ_X11
 #    include <gdk/gdkx.h>
 #  endif
 #endif
--- gfx/angle/checkout/include/EGL/eglplatform.h	2020-01-18 05:34:21.000000000 +0800
+++ gfx/angle/checkout/include/EGL/eglplatform.h	2020-01-18 05:34:21.000000000 +0800
@@ -116,7 +116,9 @@
 typedef intptr_t EGLNativePixmapType;
 typedef intptr_t EGLNativeWindowType;
 
-#elif defined(__unix__) || defined(USE_X11)
+#elif defined(__unix__)
+
+#if defined(USE_X11)
 
 /* X11 (tentative)  */
 #include <X11/Xlib.h>
@@ -126,6 +128,14 @@
 typedef Pixmap   EGLNativePixmapType;
 typedef Window   EGLNativeWindowType;
 
+#else
+
+typedef void              *EGLNativeDisplayType;
+typedef khronos_uintptr_t  EGLNativePixmapType;
+typedef khronos_uintptr_t  EGLNativeWindowType;
+
+#endif
+
 #elif defined(__APPLE__)
 
 typedef int   EGLNativeDisplayType;
--- gfx/webrender_bindings/RenderCompositorEGL.cpp	2020-01-18 05:34:22.000000000 +0800
+++ gfx/webrender_bindings/RenderCompositorEGL.cpp	2020-01-18 05:34:22.000000000 +0800
@@ -16,6 +16,5 @@
 #ifdef MOZ_WAYLAND
 #  include "mozilla/widget/GtkCompositorWidget.h"
 #  include <gdk/gdk.h>
-#  include <gdk/gdkx.h>
 #endif
 
--- widget/ScreenManager.cpp	2020-01-18 05:35:31.000000000 +0800
+++ widget/ScreenManager.cpp	2020-01-18 05:35:31.000000000 +0800
@@ -13,7 +13,6 @@
 #include "mozilla/StaticPtr.h"
 #ifdef MOZ_WAYLAND
 #  include <gdk/gdk.h>
-#  include <gdk/gdkx.h>
 #  include <gdk/gdkwayland.h>
 #endif /* MOZ_WAYLAND */
 
--- layout/xul/nsMenuPopupFrame.cpp	2020-01-18 05:34:42.000000000 +0800
+++ layout/xul/nsMenuPopupFrame.cpp	2020-01-18 05:34:42.000000000 +0800
@@ -59,7 +59,6 @@
 #include <algorithm>
 #ifdef MOZ_WAYLAND
 #  include <gdk/gdk.h>
-#  include <gdk/gdkx.h>
 #  include <gdk/gdkwayland.h>
 #endif /* MOZ_WAYLAND */
 
--- widget/gtk/mozgtk/mozgtk.c	2020-02-18 03:21:02.000000000 +0800
+++ widget/gtk/mozgtk/mozgtk.c	2020-02-18 03:21:02.000000000 +0800
@@ -655,7 +655,7 @@
 STUB(gtk_object_get_type)
 #endif
 
-#ifndef GTK3_SYMBOLS
+#if !defined(GTK3_SYMBOLS) && defined(MOZ_X11)
 // Only define the following workaround when using GTK3, which we detect
 // by checking if GTK3 stubs are not provided.
 #  include <X11/Xlib.h>
--- widget/GfxInfoX11.cpp.orig	2020-06-03 09:04:52.000000000 +0800
+++ widget/GfxInfoX11.cpp	2020-06-03 09:04:52.000000000 +0800
@@ -20,7 +20,9 @@
 
 #include "GfxInfoX11.h"
 
-#include <gdk/gdkx.h>
+#ifdef MOZ_X11
+#  include <gdk/gdkx.h>
+#endif
 #ifdef MOZ_WAYLAND
 #  include "mozilla/widget/nsWaylandDisplay.h"
 #endif
@@ -70,6 +72,13 @@
 void GfxInfo::GetData() {
   GfxInfoBase::GetData();
 
+#ifdef MOZ_WAYLAND
+  mIsWayland = true;
+  if (mIsWayland) {
+    mIsWaylandDRM = GetDMABufDevice()->IsDMABufVAAPIEnabled() || GetDMABufDevice()->IsDMABufWebGLEnabled() || GetDMABufDevice()->IsDMABufTexturesEnabled();
+  }
+#endif
+
   // to understand this function, see bug 639842. We retrieve the OpenGL driver
   // information in a separate process to protect against bad drivers.
 
@@ -585,6 +588,7 @@
 
   GetData();
 
+#ifdef MOZ_X11
   if (mGLMajorVersion == 0) {
     // If we failed to get a GL version, glxtest failed.
     *aStatus = nsIGfxInfo::FEATURE_BLOCKED_DEVICE;
@@ -609,6 +613,7 @@
     aFailureId = "FEATURE_FAILURE_SOFTWARE_GL";
     return NS_OK;
   }
+#endif
 
   return GfxInfoBase::GetFeatureStatusImpl(
       aFeature, aStatus, aSuggestedDriverVersion, aDriverInfo, aFailureId, &os);
--- widget/gtk/nsGtkKeyUtils.cpp.orig	2020-06-03 07:36:50.000000000 +0800
+++ widget/gtk/nsGtkKeyUtils.cpp	2020-06-09 00:36:40.963323814 +0800
@@ -12,10 +12,12 @@
 #include <gdk/gdkkeysyms.h>
 #include <algorithm>
 #include <gdk/gdk.h>
-#include <gdk/gdkx.h>
 #include <dlfcn.h>
 #include <gdk/gdkkeysyms-compat.h>
+#ifdef MOZ_X11
+#include <gdk/gdkx.h>
 #include <X11/XKBlib.h>
+#endif
 #include "X11UndefineNone.h"
 #include "IMContextWrapper.h"
 #include "WidgetUtils.h"
@@ -50,7 +52,7 @@
 
 KeymapWrapper* KeymapWrapper::sInstance = nullptr;
 guint KeymapWrapper::sLastRepeatableHardwareKeyCode = 0;
-Time KeymapWrapper::sLastRepeatableKeyTime = 0;
+GTime KeymapWrapper::sLastRepeatableKeyTime = 0;
 KeymapWrapper::RepeatState KeymapWrapper::sRepeatState =
     KeymapWrapper::NOT_PRESSED;
 
@@ -346,9 +348,11 @@
 
   g_object_ref(mGdkKeymap);
 
+#ifdef MOZ_X11
   if (gfxPlatformGtk::GetPlatform()->IsX11Display()) {
     InitXKBExtension();
   }
+#endif
 
   Init();
 }
@@ -365,16 +369,18 @@
   mModifierKeys.Clear();
   memset(mModifierMasks, 0, sizeof(mModifierMasks));
 
+#ifdef MOZ_X11
   if (gfxPlatformGtk::GetPlatform()->IsX11Display()) {
     InitBySystemSettingsX11();
   }
+#endif
 #ifdef MOZ_WAYLAND
-  else {
-    InitBySystemSettingsWayland();
-  }
+  InitBySystemSettingsWayland();
 #endif
 
+#ifdef MOZ_X11
   gdk_window_add_filter(nullptr, FilterEvents, this);
+#endif
 
   MOZ_LOG(gKeymapWrapperLog, LogLevel::Info,
           ("%p Init, CapsLock=0x%X, NumLock=0x%X, "
@@ -387,6 +393,7 @@
            GetModifierMask(SUPER), GetModifierMask(HYPER)));
 }
 
+#ifdef MOZ_X11
 void KeymapWrapper::InitXKBExtension() {
   PodZero(&mKeyboardState);
 
@@ -447,7 +454,9 @@
   MOZ_LOG(gKeymapWrapperLog, LogLevel::Info,
           ("%p InitXKBExtension, Succeeded", this));
 }
+#endif
 
+#ifdef MOZ_X11
 void KeymapWrapper::InitBySystemSettingsX11() {
   MOZ_LOG(gKeymapWrapperLog, LogLevel::Info,
           ("%p InitBySystemSettingsX11, mGdkKeymap=%p", this, mGdkKeymap));
@@ -614,6 +623,7 @@
   XFreeModifiermap(xmodmap);
   XFree(xkeymap);
 }
+#endif
 
 #ifdef MOZ_WAYLAND
 void KeymapWrapper::SetModifierMask(xkb_keymap* aKeymap,
@@ -771,7 +781,9 @@
 #endif
 
 KeymapWrapper::~KeymapWrapper() {
+#ifdef MOZ_X11
   gdk_window_remove_filter(nullptr, FilterEvents, this);
+#endif
   if (gfxPlatformGtk::GetPlatform()->IsX11Display()) {
     g_signal_handlers_disconnect_by_func(mGdkKeymap,
                                          FuncToGpointer(OnKeysChanged), this);
@@ -782,6 +794,7 @@
   MOZ_LOG(gKeymapWrapperLog, LogLevel::Info, ("%p Destructor", this));
 }
 
+#ifdef MOZ_X11
 /* static */
 GdkFilterReturn KeymapWrapper::FilterEvents(GdkXEvent* aXEvent,
                                             GdkEvent* aGdkEvent,
@@ -895,6 +908,7 @@
 
   return GDK_FILTER_CONTINUE;
 }
+#endif
 
 static void ResetBidiKeyboard() {
   // Reset the bidi keyboard settings for the new GdkKeymap
@@ -1718,6 +1732,7 @@
   // state.  It means if there're some pending modifier key press or
   // key release events, the result isn't what we want.
   guint modifierState = aGdkKeyEvent->state;
+#ifdef MOZ_X11
   GdkDisplay* gdkDisplay = gdk_display_get_default();
   if (aGdkKeyEvent->is_modifier && GDK_IS_X11_DISPLAY(gdkDisplay)) {
     Display* display = gdk_x11_display_get_xdisplay(gdkDisplay);
@@ -1735,6 +1750,7 @@
       }
     }
   }
+#endif
   InitInputEvent(aKeyEvent, modifierState);
 
   switch (aGdkKeyEvent->keyval) {
@@ -1981,6 +1997,7 @@
   return result;
 }
 
+#ifdef MOZ_X11
 bool KeymapWrapper::IsAutoRepeatableKey(guint aHardwareKeyCode) {
   uint8_t indexOfArray = aHardwareKeyCode / 8;
   MOZ_ASSERT(indexOfArray < ArrayLength(mKeyboardState.auto_repeats),
@@ -1988,6 +2005,7 @@
   char bitMask = 1 << (aHardwareKeyCode % 8);
   return (mKeyboardState.auto_repeats[indexOfArray] & bitMask) != 0;
 }
+#endif
 
 /* static */
 bool KeymapWrapper::IsBasicLatinLetterOrNumeral(uint32_t aCharCode) {
--- widget/gtk/WindowSurfaceProvider.cpp	2020-01-18 05:35:31.000000000 +0800
+++ widget/gtk/WindowSurfaceProvider.cpp	2020-01-18 05:35:31.000000000 +0800
@@ -9,9 +9,11 @@
 #include "gfxPlatformGtk.h"
 #include "mozilla/layers/LayersTypes.h"
 #include "nsWindow.h"
+#ifdef MOZ_X11
 #include "WindowSurfaceX11Image.h"
 #include "WindowSurfaceX11SHM.h"
 #include "WindowSurfaceXRender.h"
+#endif
 #ifdef MOZ_WAYLAND
 #  include "WindowSurfaceWayland.h"
 #endif
@@ -24,10 +26,12 @@
 
 WindowSurfaceProvider::WindowSurfaceProvider()
     : mIsX11Display(false),
+#ifdef MOZ_X11
       mXDisplay(nullptr),
       mXWindow(0),
       mXVisual(nullptr),
       mXDepth(0),
+#endif
       mWindowSurface(nullptr)
 #ifdef MOZ_WAYLAND
       ,
@@ -37,6 +41,7 @@
       mIsShaped(false) {
 }
 
+#ifdef MOZ_X11
 void WindowSurfaceProvider::Initialize(Display* aDisplay, Window aWindow,
                                        Visual* aVisual, int aDepth,
                                        bool aIsShaped) {
@@ -53,6 +58,7 @@
   mIsShaped = aIsShaped;
   mIsX11Display = true;
 }
+#endif
 
 #ifdef MOZ_WAYLAND
 void WindowSurfaceProvider::Initialize(nsWindow* aWidget) {
@@ -71,6 +77,7 @@
   }
 #endif
 
+#if defined(MOZ_WIDGET_GTK) && defined(MOZ_X11)
   // We should be initialized
   MOZ_ASSERT(mXDisplay);
 
@@ -83,8 +90,9 @@
     return MakeUnique<WindowSurfaceXRender>(mXDisplay, mXWindow, mXVisual,
                                             mXDepth);
   }
+#endif
 
-#ifdef MOZ_HAVE_SHMIMAGE
+#if defined(MOZ_HAVE_SHMIMAGE) && defined(MOZ_X11)
   if (!mIsShaped && nsShmImage::UseShm()) {
     LOGDRAW(("Drawing to Window 0x%lx will use MIT-SHM\n", mXWindow));
     return MakeUnique<WindowSurfaceX11SHM>(mXDisplay, mXWindow, mXVisual,
@@ -92,9 +100,11 @@
   }
 #endif  // MOZ_HAVE_SHMIMAGE
 
+#ifdef MOZ_X11
   LOGDRAW(("Drawing to Window 0x%lx will use XPutImage\n", mXWindow));
   return MakeUnique<WindowSurfaceX11Image>(mXDisplay, mXWindow, mXVisual,
                                            mXDepth, mIsShaped);
+#endif
 }
 
 already_AddRefed<gfx::DrawTarget>
@@ -109,8 +119,9 @@
 
   *aBufferMode = BufferMode::BUFFER_NONE;
   RefPtr<DrawTarget> dt = nullptr;
-  if (!(dt = mWindowSurface->Lock(aInvalidRegion)) && mIsX11Display &&
-      !mWindowSurface->IsFallback()) {
+  if (!(dt = mWindowSurface->Lock(aInvalidRegion))) {
+#ifdef MOZ_X11
+		if (mIsX11Display && !mWindowSurface->IsFallback()) {
     // We can't use WindowSurfaceX11Image fallback on Wayland but
     // Lock() call on WindowSurfaceWayland should never fail.
     gfxWarningOnce()
@@ -118,6 +129,8 @@
     mWindowSurface = MakeUnique<WindowSurfaceX11Image>(
         mXDisplay, mXWindow, mXVisual, mXDepth, mIsShaped);
     dt = mWindowSurface->Lock(aInvalidRegion);
+		}
+#endif
   }
   return dt.forget();
 }
--- widget/gtk/nsClipboard.cpp.orig	2020-06-03 07:36:50.000000000 +0800
+++ widget/gtk/nsClipboard.cpp	2020-06-09 00:44:34.873304440 +0800
@@ -9,7 +9,9 @@
 
 #include "nsArrayUtils.h"
 #include "nsClipboard.h"
+#ifdef MOZ_X11
 #include "nsClipboardX11.h"
+#endif
 #if defined(MOZ_WAYLAND)
 #  include "nsClipboardWayland.h"
 #endif
@@ -31,7 +33,9 @@
 #include "imgIContainer.h"
 
 #include <gtk/gtk.h>
+#ifdef MOZ_X11
 #include <gtk/gtkx.h>
+#endif
 
 #include "mozilla/Encoding.h"
 
@@ -91,13 +95,13 @@
 NS_IMPL_ISUPPORTS(nsClipboard, nsIClipboard, nsIObserver)
 
 nsresult nsClipboard::Init(void) {
+#ifdef MOZ_X11
   if (gfxPlatformGtk::GetPlatform()->IsX11Display()) {
     mContext = MakeUnique<nsRetrievalContextX11>();
-#if defined(MOZ_WAYLAND)
-  } else {
+  }
+#elif defined(MOZ_WAYLAND)
     mContext = MakeUnique<nsRetrievalContextWayland>();
-#endif
-  }
+#endif
   NS_ASSERTION(mContext, "Missing nsRetrievalContext for nsClipboard!");
 
   nsCOMPtr<nsIObserverService> os = mozilla::services::GetObserverService();
--- toolkit/components/remote/nsRemoteService.cpp.orig	2020-06-03 07:37:34.000000000 +0800
+++ toolkit/components/remote/nsRemoteService.cpp	2020-06-09 00:53:35.133282321 +0800
@@ -11,12 +11,17 @@
 #endif
 
 #ifdef MOZ_WIDGET_GTK
+#ifdef MOZ_X11
 #  include "nsGTKRemoteServer.h"
 #  include "nsXRemoteClient.h"
+#endif
 #  ifdef MOZ_ENABLE_DBUS
 #    include "nsDBusRemoteServer.h"
 #    include "nsDBusRemoteClient.h"
 #  endif
+#  ifdef MOZ_WAYLAND
+#  include <gdk/gdkwayland.h>
+#  endif
 #elif defined(XP_WIN)
 #  include "nsWinRemoteServer.h"
 #  include "nsWinRemoteClient.h"
@@ -109,9 +114,11 @@
     client = MakeUnique<nsDBusRemoteClient>();
   }
 #  endif
+#ifdef MOZ_X11
   if (!client && useX11Remote) {
     client = MakeUnique<nsXRemoteClient>();
   }
+#endif
 #elif defined(XP_WIN)
   client = MakeUnique<nsWinRemoteClient>();
 #elif defined(XP_DARWIN)
@@ -158,9 +165,11 @@
     mRemoteServer = MakeUnique<nsDBusRemoteServer>();
   }
 #  endif
+#ifdef MOZ_X11
   if (!mRemoteServer && useX11Remote) {
     mRemoteServer = MakeUnique<nsGTKRemoteServer>();
   }
+#endif
 #elif defined(XP_WIN)
   mRemoteServer = MakeUnique<nsWinRemoteServer>();
 #elif defined(XP_DARWIN)
--- gfx/webrender_bindings/RenderThread.cpp	2020-06-03 09:04:50.000000000 +0800
+++ gfx/webrender_bindings/RenderThread.cpp	2020-06-03 09:04:50.000000000 +0800
@@ -36,8 +36,13 @@
 #endif
 
 #ifdef MOZ_WIDGET_GTK
+#ifdef MOZ_X11
 #  include <gdk/gdkx.h>
 #endif
+#ifdef MOZ_WAYLAND
+#  include <gdk/gdkwayland.h>
+#endif
+#endif
 
 #ifdef MOZ_WAYLAND
 #  include "GLLibraryEGL.h"
--- gfx/gl/GLContextProviderWayland.cpp	2020-01-18 05:34:21.000000000 +0800
+++ gfx/gl/GLContextProviderWayland.cpp	2020-01-18 05:34:21.000000000 +0800
@@ -3,9 +3,11 @@
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
+#ifdef MOZ_X11
+
 #ifdef MOZ_WIDGET_GTK
 #  include <gdk/gdk.h>
 #  include <gdk/gdkx.h>
 #endif
 
 #include "GLContextProvider.h"
@@ -68,3 +70,45 @@
 }
 
 }  // namespace mozilla::gl
+
+#else
+
+#include <gdk/gdk.h>
+#include <gdk/gdkwayland.h>
+
+#include "GLContextProvider.h"
+
+namespace mozilla::gl {
+
+using namespace mozilla::gfx;
+using namespace mozilla::widget;
+
+static class GLContextProviderEGL sGLContextProviderEGL;
+
+already_AddRefed<GLContext> GLContextProviderWayland::CreateForCompositorWidget(
+    CompositorWidget* aCompositorWidget, bool aWebRender,
+    bool aForceAccelerated) {
+  return sGLContextProviderEGL.CreateForCompositorWidget(
+      aCompositorWidget, aWebRender, aForceAccelerated);
+}
+
+/*static*/
+already_AddRefed<GLContext> GLContextProviderWayland::CreateHeadless(
+    const GLContextCreateDesc& desc, nsACString* const out_failureId) {
+  return sGLContextProviderEGL.CreateHeadless(desc, out_failureId);
+}
+
+/*static*/
+GLContext* GLContextProviderWayland::GetGlobalContext() {
+  return sGLContextProviderEGL.GetGlobalContext();
+}
+
+/*static*/
+void GLContextProviderWayland::Shutdown() {
+  sGLContextProviderEGL.Shutdown();
+}
+
+}  // namespace mozilla::gl
+
+
+#endif
--- widget/gtk/moz.build	2020-09-05 12:08:00.285049341 +0800
+++ widget/gtk/moz.build	2020-09-05 12:08:00.285049341 +0800
@@ -59,7 +59,7 @@
     "WaylandVsyncSource.cpp", # conflicts with X11 headers
 ]
 
-if CONFIG["MOZ_X11"]:
+if CONFIG["MOZ_X11"] or CONFIG["MOZ_WAYLAND"]:
     UNIFIED_SOURCES += [
         "CompositorWidgetChild.cpp",
         "CompositorWidgetParent.cpp",
@@ -83,19 +83,22 @@
         "nsPSPrinters.cpp",
     ]
 
+UNIFIED_SOURCES += [
+    "nsClipboard.cpp",
+    "nsDragService.cpp",
+    "WindowSurfaceProvider.cpp",
+]
+EXPORTS.mozilla.widget += [
+    "WindowSurfaceProvider.h",
+]
+
 if CONFIG["MOZ_X11"]:
     UNIFIED_SOURCES += [
-        "nsClipboard.cpp",
         "nsClipboardX11.cpp",
-        "nsDragService.cpp",
-        "WindowSurfaceProvider.cpp",
         "WindowSurfaceX11.cpp",
         "WindowSurfaceX11Image.cpp",
         "WindowSurfaceXRender.cpp",
     ]
-    EXPORTS.mozilla.widget += [
-        "WindowSurfaceProvider.h",
-    ]
 
 if CONFIG["MOZ_WAYLAND"]:
     UNIFIED_SOURCES += [
@@ -142,7 +145,7 @@
     "/widget/headless",
 ]
 
-if CONFIG["MOZ_X11"]:
+if CONFIG["MOZ_X11"] or CONFIG["MOZ_WAYLAND"]:
     LOCAL_INCLUDES += [
         "/widget/x11",
     ]
--- gfx/layers/AnimationHelper.h	2020-08-31 22:04:09.000000000 +0800
+++ gfx/layers/AnimationHelper.h	2020-08-31 22:04:09.000000000 +0800
@@ -7,6 +7,7 @@
 #ifndef mozilla_layers_AnimationHelper_h
 #define mozilla_layers_AnimationHelper_h
 
+#include "X11UndefineNone.h"
 #include "mozilla/dom/Nullable.h"
 #include "mozilla/ComputedTimingFunction.h"    // for ComputedTimingFunction
 #include "mozilla/layers/LayersMessages.h"     // for TransformData, etc
@@ -16,7 +16,6 @@
 #include "mozilla/TimingParams.h"
 #include "mozilla/Types.h"  // for SideBits
 #include "mozilla/Variant.h"
-#include "X11UndefineNone.h"
 #include <unordered_map>
 
 namespace mozilla {
--- widget/gtk/WindowSurfaceWayland.cpp.orig	2020-09-05 12:08:00.291716605 +0800
+++ widget/gtk/WindowSurfaceWayland.cpp	2020-09-05 12:08:00.291716605 +0800
@@ -12,6 +12,7 @@
 #include "mozilla/gfx/2D.h"
 #include "mozilla/gfx/Tools.h"
 #include "gfxPlatform.h"
+#include "gfxImageSurface.h"
 #include "MozContainer.h"
 #include "nsTArray.h"
 #include "base/message_loop.h"  // for MessageLoop
--- widget/gtk/nsUserIdleServiceGTK.cpp.orig	2020-06-03 07:36:50.000000000 +0800
+++ widget/gtk/nsUserIdleServiceGTK.cpp	2020-06-09 00:58:07.493271166 +0800
@@ -16,6 +16,7 @@
 
 static mozilla::LazyLogModule sIdleLog("nsIUserIdleService");
 
+#ifdef MOZ_X11
 typedef bool (*_XScreenSaverQueryExtension_fn)(Display* dpy, int* event_base,
                                                int* error_base);
 
@@ -24,12 +25,15 @@
 typedef void (*_XScreenSaverQueryInfo_fn)(Display* dpy, Drawable drw,
                                           XScreenSaverInfo* info);
 
-static bool sInitialized = false;
 static _XScreenSaverQueryExtension_fn _XSSQueryExtension = nullptr;
 static _XScreenSaverAllocInfo_fn _XSSAllocInfo = nullptr;
 static _XScreenSaverQueryInfo_fn _XSSQueryInfo = nullptr;
+#endif
+
+static bool sInitialized = false;
 
 static void Initialize() {
+#ifdef MOZ_X11
   if (!gdk_display_get_default() ||
       !GDK_IS_X11_DISPLAY(gdk_display_get_default())) {
     return;
@@ -57,16 +61,21 @@
     MOZ_LOG(sIdleLog, LogLevel::Warning, ("Failed to get XSSAllocInfo!\n"));
   if (!_XSSQueryInfo)
     MOZ_LOG(sIdleLog, LogLevel::Warning, ("Failed to get XSSQueryInfo!\n"));
+#endif
 
   sInitialized = true;
 }
 
-nsUserIdleServiceGTK::nsUserIdleServiceGTK() : mXssInfo(nullptr) {
-  Initialize();
-}
+nsUserIdleServiceGTK::nsUserIdleServiceGTK() 
+#ifdef MOZ_X11
+: mXssInfo(nullptr)
+#endif
+{ Initialize(); }
 
 nsUserIdleServiceGTK::~nsUserIdleServiceGTK() {
+#ifdef MOZ_X11
   if (mXssInfo) XFree(mXssInfo);
+#endif
 
 // It is not safe to unload libXScrnSaver until each display is closed because
 // the library registers callbacks through XESetCloseDisplay (Bug 397607).
@@ -88,6 +97,7 @@
   // Ask xscreensaver about idle time:
   *aIdleTime = 0;
 
+#ifdef MOZ_X11
   // We might not have a display (cf. in xpcshell)
   Display* dplay = GDK_DISPLAY_XDISPLAY(gdk_display_get_default());
   if (!dplay) {
@@ -107,6 +117,7 @@
     *aIdleTime = mXssInfo->idle;
     return true;
   }
+#endif
   // If we get here, we couldn't get to XScreenSaver:
   MOZ_LOG(sIdleLog, LogLevel::Warning, ("XSSQueryExtension returned false!\n"));
   return false;
--- gfx/gl/GLContextProvider.h	2020-08-31 22:04:09.000000000 +0800
+++ gfx/gl/GLContextProvider.h	2020-08-31 22:04:09.000000000 +0800
@@ -54,17 +54,18 @@
 #  define GL_CONTEXT_PROVIDER_NAME GLContextProviderX11
 #  include "GLContextProviderImpl.h"
 #  undef GL_CONTEXT_PROVIDER_NAME
-#  if defined(MOZ_WAYLAND)
-#    define GL_CONTEXT_PROVIDER_NAME GLContextProviderWayland
-#    include "GLContextProviderImpl.h"
-#    undef GL_CONTEXT_PROVIDER_NAME
-#    define GL_CONTEXT_PROVIDER_DEFAULT GLContextProviderWayland
-#  endif
 #  ifndef GL_CONTEXT_PROVIDER_DEFAULT
 #    define GL_CONTEXT_PROVIDER_DEFAULT GLContextProviderX11
 #  endif
 #endif
 
+#if defined(MOZ_WAYLAND)
+#  define GL_CONTEXT_PROVIDER_NAME GLContextProviderWayland
+# include "GLContextProviderImpl.h"
+#  undef GL_CONTEXT_PROVIDER_NAME
+#  define GL_CONTEXT_PROVIDER_DEFAULT GLContextProviderWayland
+#endif
+
 #ifndef GL_CONTEXT_PROVIDER_DEFAULT
 #  define GL_CONTEXT_PROVIDER_DEFAULT GLContextProviderEGL
 #endif
--- widget/gtk/MozContainer.cpp	2020-08-31 22:04:19.000000000 +0800
+++ widget/gtk/MozContainer.cpp	2020-08-31 22:04:19.000000000 +0800
@@ -9,10 +9,11 @@
 
 #include <glib.h>
 #include <gtk/gtk.h>
-#include <gdk/gdkx.h>
 #include <stdio.h>
 #ifdef MOZ_WAYLAND
 #  include "gfxPlatformGtk.h"
+#else
+#include <gdk/gdkx.h>
 #endif
 
 #ifdef ACCESSIBILITY
--- widget/gtk/MozContainerWayland.cpp	2020-08-31 22:04:20.000000000 +0800
+++ widget/gtk/MozContainerWayland.cpp	2020-08-31 22:04:20.000000000 +0800
@@ -9,7 +9,6 @@
 
 #include <glib.h>
 #include <gtk/gtk.h>
-#include <gdk/gdkx.h>
 #include "nsWaylandDisplay.h"
 #include "gfxPlatformGtk.h"
 #include <wayland-egl.h>
--- widget/gtk/nsDragService.cpp	2020-02-04 17:28:52.008883979 +0800
+++ widget/gtk/nsDragService.cpp	2020-02-04 17:28:52.008883979 +0800
@@ -22,7 +22,11 @@
 #include "prthread.h"
 #include <dlfcn.h>
 #include <gtk/gtk.h>
+#ifdef MOZ_WAYLAND
+#include <gdk/gdkwayland.h>
+#else
 #include <gdk/gdkx.h>
+#endif
 #include "nsCRT.h"
 #include "mozilla/BasicEvents.h"
 #include "mozilla/Services.h"
@@ -30,7 +34,6 @@
 #include "mozilla/PresShell.h"
 #include "GRefPtr.h"
 
-#include "gfxXlibSurface.h"
 #include "gfxContext.h"
 #include "nsImageToPixbuf.h"
 #include "nsPresContext.h"
@@ -47,6 +50,8 @@
 #ifdef MOZ_WAYLAND
 #  include "nsClipboardWayland.h"
 #  include "gfxPlatformGtk.h"
+#else
+#include "gfxXlibSurface.h"
 #endif
 
 using namespace mozilla;
--- widget/gtk/nsWindow.cpp.orig	2020-08-31 22:04:20.000000000 +0800
+++ widget/gtk/nsWindow.cpp	2020-08-31 22:04:20.000000000 +0800
@@ -45,13 +45,13 @@
 #include "ScreenHelperGTK.h"
 
 #include <gtk/gtk.h>
-#include <gtk/gtkx.h>
 
 #ifdef MOZ_WAYLAND
 #  include <gdk/gdkwayland.h>
 #endif /* MOZ_WAYLAND */
 
 #ifdef MOZ_X11
+#  include <gtk/gtkx.h>
 #  include <gdk/gdkx.h>
 #  include <X11/Xatom.h>
 #  include <X11/extensions/XShm.h>
@@ -62,6 +62,8 @@
 #include <gdk/gdkkeysyms.h>
 
 #if defined(MOZ_WAYLAND)
+#  include <gdk/gdk.h>
+#  include <gdk/gdkkeysyms-compat.h>
 #  include <gdk/gdkwayland.h>
 #  include "nsView.h"
 #endif
@@ -120,11 +122,11 @@
 #include "mozilla/layers/APZInputBridge.h"
 #include "mozilla/layers/IAPZCTreeManager.h"
 
+#include "GtkCompositorWidget.h"
+#include "GLContextEGL.h"  // for GLContextEGL::FindVisual()
 #ifdef MOZ_X11
 #  include "mozilla/gfx/gfxVars.h"
 #  include "GLContextGLX.h"  // for GLContextGLX::FindVisual()
-#  include "GLContextEGL.h"  // for GLContextEGL::FindVisual()
-#  include "GtkCompositorWidget.h"
 #  include "gfxXlibSurface.h"
 #  include "WindowSurfaceX11Image.h"
 #  include "WindowSurfaceX11SHM.h"
@@ -146,8 +148,11 @@
 using namespace mozilla::gfx;
 using namespace mozilla::widget;
 using namespace mozilla::layers;
-using mozilla::gl::GLContextEGL;
+#ifdef MOZ_X11
 using mozilla::gl::GLContextGLX;
+#else
+using mozilla::gl::GLContextEGL;
+#endif
 
 // Don't put more than this many rects in the dirty region, just fluff
 // out to the bounding-box if there are more
@@ -269,6 +274,7 @@
 
 namespace mozilla {
 
+#ifdef MOZ_X11
 class CurrentX11TimeGetter {
  public:
   explicit CurrentX11TimeGetter(GdkWindow* aWindow)
@@ -316,6 +322,7 @@
   GdkWindow* mWindow;
   TimeStamp mAsyncUpdateStart;
 };
+#endif
 
 }  // namespace mozilla
 
@@ -421,7 +428,11 @@
   mCreated = false;
   mHandleTouchEvent = false;
   mIsDragPopup = false;
+#ifdef MOZ_X11
   mIsX11Display = gfxPlatformGtk::GetPlatform()->IsX11Display();
+#else
+  mIsX11Display = false;
+#endif
 
   mContainer = nullptr;
   mGdkWindow = nullptr;
@@ -1831,6 +1842,7 @@
 }
 
 static bool GetWindowManagerName(GdkWindow* gdk_window, nsACString& wmName) {
+#ifdef MOZ_X11
   if (!gfxPlatformGtk::GetPlatform()->IsX11Display()) {
     return false;
   }
@@ -1893,6 +1905,7 @@
   }
 
   wmName = reinterpret_cast<const char*>(prop_return);
+#endif
   return true;
 }
 
@@ -1950,6 +1963,7 @@
   if (!mIsX11Display || !mShell) {
     return;
   }
+#ifdef MOZ_X11
   // Get the gdk window for this widget.
   GdkWindow* gdk_window = gtk_widget_get_window(mShell);
   if (!gdk_window) {
@@ -1978,6 +1992,7 @@
 
   workspaceID.AppendInt((int32_t)wm_desktop[0]);
   g_free(wm_desktop);
+#endif
 }
 
 void nsWindow::MoveToWorkspace(const nsAString& workspaceIDStr) {
@@ -1987,6 +2002,7 @@
     return;
   }
 
+#ifdef MOZ_X11
   // Get the gdk window for this widget.
   GdkWindow* gdk_window = gtk_widget_get_window(mShell);
   if (!gdk_window) {
@@ -2020,6 +2036,7 @@
              SubstructureNotifyMask | SubstructureRedirectMask, &xevent);
 
   XFlush(xdisplay);
+#endif
 }
 
 typedef void (*SetUserTimeFunc)(GdkWindow* aWindow, guint32 aTimestamp);
@@ -2060,9 +2077,13 @@
   // button and key releases.  Therefore use the most recent of
   // gdk_x11_display_get_user_time and the last time that we have seen.
   GdkDisplay* gdkDisplay = gdk_display_get_default();
+#ifdef MOZ_X11
   guint32 timestamp = GDK_IS_X11_DISPLAY(gdkDisplay)
                           ? gdk_x11_display_get_user_time(gdkDisplay)
                           : gtk_get_current_event_time();
+#else
+  guint32 timestamp = gtk_get_current_event_time();
+#endif
 
   if (sLastUserInputTime != GDK_CURRENT_TIME &&
       TimestampIsNewerThan(sLastUserInputTime, timestamp)) {
@@ -2215,6 +2236,7 @@
     return;
   }
 
+#ifdef MOZ_X11
   GdkAtom cardinal_atom = gdk_x11_xatom_to_atom(XA_CARDINAL);
 
   GdkAtom type_returned;
@@ -2248,6 +2270,7 @@
 
   LOG(("nsWindow::UpdateClientOffsetFromFrameExtents [%p] %d,%d\n", (void*)this,
        mClientOffset.x, mClientOffset.y));
+#endif
 }
 
 LayoutDeviceIntPoint nsWindow::GetClientOffset() {
@@ -2257,6 +2280,7 @@
 
 gboolean nsWindow::OnPropertyNotifyEvent(GtkWidget* aWidget,
                                          GdkEventProperty* aEvent) {
+#ifdef MOZ_X11
   if (aEvent->atom == gdk_atom_intern("_NET_FRAME_EXTENTS", FALSE)) {
     UpdateClientOffsetFromFrameExtents();
     return FALSE;
@@ -2265,6 +2289,7 @@
   if (GetCurrentTimeGetter()->PropertyNotifyHandler(aWidget, aEvent)) {
     return TRUE;
   }
+#endif
 
   return FALSE;
 }
@@ -2391,9 +2416,11 @@
 
     case NS_NATIVE_WINDOW_WEBRTC_DEVICE_ID:
     case NS_NATIVE_SHAREABLE_WINDOW:
+#ifdef MOZ_X11
       if (mIsX11Display) {
         return (void*)GDK_WINDOW_XID(gdk_window_get_toplevel(mGdkWindow));
       }
+#endif
       NS_WARNING(
           "nsWindow::GetNativeData(): "
           "NS_NATIVE_SHAREABLE_WINDOW / NS_NATIVE_WINDOW_WEBRTC_DEVICE_ID is "
@@ -2415,9 +2442,11 @@
     case NS_NATIVE_OPENGL_CONTEXT:
       return nullptr;
     case NS_NATIVE_EGL_WINDOW: {
+#ifdef MOZ_X11
       if (mIsX11Display) {
         return mGdkWindow ? (void*)GDK_WINDOW_XID(mGdkWindow) : nullptr;
       }
+#endif  // MOZ_X11
 #ifdef MOZ_WAYLAND
       if (mContainer) {
         return moz_container_wayland_get_egl_window(mContainer,
@@ -2756,8 +2785,13 @@
   nsIWidgetListener* listener = GetListener();
   if (!listener) return FALSE;
 
+#ifdef MOZ_X11
   LOGDRAW(("received expose event [%p] %p 0x%lx (rects follow):\n", this,
            mGdkWindow, mIsX11Display ? gdk_x11_window_get_xid(mGdkWindow) : 0));
+#else
+  LOGDRAW(("received expose event [%p] %p 0x%lx (rects follow):\n", this,
+           mGdkWindow, 0));
+#endif
   LayoutDeviceIntRegion exposeRegion;
   if (!ExtractExposeRegion(exposeRegion, cr)) {
     return FALSE;
@@ -3134,12 +3168,10 @@
 
   mBounds.SizeTo(size);
 
-#ifdef MOZ_X11
   // Notify the GtkCompositorWidget of a ClientSizeChange
   if (mCompositorWidgetDelegate) {
     mCompositorWidgetDelegate->NotifyClientSizeChanged(GetClientSize());
   }
-#endif
 
   // Gecko permits running nested event loops during processing of events,
   // GtkWindow callers of gtk_widget_size_allocate expect the signal
@@ -3239,6 +3271,7 @@
     MOZ_ASSERT(gdk_window, "gdk_window_get_toplevel should not return null");
 
     bool canDrag = true;
+#ifdef MOZ_X11
     if (mIsX11Display) {
       // Workaround for https://bugzilla.gnome.org/show_bug.cgi?id=789054
       // To avoid crashes disable double-click on WM without _NET_WM_MOVERESIZE.
@@ -3249,6 +3282,7 @@
         canDrag = false;
       }
     }
+#endif
 
     if (canDrag) {
       gdk_window_begin_move_drag(gdk_window, 1, aEvent->x_root, aEvent->y_root,
@@ -3693,16 +3727,20 @@
     int64_t tick =
         BaseTimeDurationPlatformUtils::TicksFromMilliseconds(timestampTime);
     eventTimeStamp = TimeStamp::FromSystemTime(tick);
-  } else {
+  }
+#ifdef MOZ_X11
+  else {
     CurrentX11TimeGetter* getCurrentTime = GetCurrentTimeGetter();
     MOZ_ASSERT(getCurrentTime,
                "Null current time getter despite having a window");
     eventTimeStamp =
         TimeConverter().GetTimeStampFromSystemTime(aEventTime, *getCurrentTime);
   }
+#endif
   return eventTimeStamp;
 }
 
+#ifdef MOZ_X11
 mozilla::CurrentX11TimeGetter* nsWindow::GetCurrentTimeGetter() {
   MOZ_ASSERT(mGdkWindow, "Expected mGdkWindow to be set");
   if (MOZ_UNLIKELY(!mCurrentTimeGetter)) {
@@ -3710,6 +3748,7 @@
   }
   return mCurrentTimeGetter.get();
 }
+#endif
 
 gboolean nsWindow::OnKeyPressEvent(GdkEventKey* aEvent) {
   LOGFOCUS(("OnKeyPressEvent [%p]\n", (void*)this));
@@ -4336,6 +4375,7 @@
 
       // Use GL/WebRender compatible visual only when it is necessary, since
       // the visual consumes more memory.
+#ifdef MOZ_X11
       if (mIsX11Display && mIsAccelerated) {
         if (useWebRender) {
           // WebRender rquests AlphaVisual for making readback to work
@@ -4370,6 +4410,7 @@
           NS_WARNING("We're missing X11 Visual!");
         }
       }
+#endif
 
       if (!isSetVisual && needsAlphaVisual) {
         GdkScreen* screen = gtk_widget_get_screen(mShell);
@@ -4759,8 +4800,13 @@
        mWindowType == eWindowType_toplevel ? "Toplevel" : "Popup",
        mIsPIPWindow ? "PIP window" : ""));
   if (mShell) {
+#ifdef MOZ_X11
     LOG(("\tmShell %p mContainer %p mGdkWindow %p 0x%lx\n", mShell, mContainer,
          mGdkWindow, mIsX11Display ? gdk_x11_window_get_xid(mGdkWindow) : 0));
+#else
+    LOG(("\tmShell %p mContainer %p mGdkWindow %p 0x%lx\n", mShell, mContainer,
+         mGdkWindow, 0));
+#endif
   } else if (mContainer) {
     LOG(("\tmContainer %p mGdkWindow %p\n", mContainer, mGdkWindow));
   } else if (mGdkWindow) {
@@ -4793,13 +4839,13 @@
       SetCompositorHint(GTK_WIDGET_COMPOSIDED_ENABLED);
     }
   }
+#endif
 #  ifdef MOZ_WAYLAND
-  else if (!mIsX11Display) {
+  if (!mIsX11Display) {
     mSurfaceProvider.Initialize(this);
     WaylandStartVsync();
   }
 #  endif
-#endif
 
   // Set default application name when it's empty.
   if (mGtkWindowAppName.IsEmpty()) {
@@ -4912,13 +4958,11 @@
     gdk_window_resize(mGdkWindow, size.width, size.height);
   }
 
-#ifdef MOZ_X11
   // Notify the GtkCompositorWidget of a ClientSizeChange
   // This is different than OnSizeAllocate to catch initial sizing
   if (mCompositorWidgetDelegate) {
     mCompositorWidgetDelegate->NotifyClientSizeChanged(GetClientSize());
   }
-#endif
 
   // Does it need to be shown because bounds were previously insane?
   if (mNeedsShow && mIsShown) {
@@ -4972,13 +5016,11 @@
     }
   }
 
-#ifdef MOZ_X11
   // Notify the GtkCompositorWidget of a ClientSizeChange
   // This is different than OnSizeAllocate to catch initial sizing
   if (mCompositorWidgetDelegate) {
     mCompositorWidgetDelegate->NotifyClientSizeChanged(GetClientSize());
   }
-#endif
 
   // Does it need to be shown because bounds were previously insane?
   if (mNeedsShow && mIsShown) {
@@ -5663,6 +5705,7 @@
     cairo_surface_destroy(surface);
   }
 
+#ifdef MOZ_X11
   if (!mNeedsShow) {
     Display* xDisplay = GDK_WINDOW_XDISPLAY(mGdkWindow);
     Window xDrawable = GDK_WINDOW_XID(mGdkWindow);
@@ -5685,6 +5728,7 @@
 
     XFreePixmap(xDisplay, maskPixmap);
   }
+#endif
 }
 
 void nsWindow::GrabPointer(guint32 aTime) {
@@ -7220,6 +7264,8 @@
     return false;
   }
 
+
+#ifdef MOZ_X11
   if (mIsX11Display) {
     // Workaround for https://bugzilla.gnome.org/show_bug.cgi?id=789054
     // To avoid crashes disable double-click on WM without _NET_WM_MOVERESIZE.
@@ -7235,6 +7281,7 @@
       }
     }
   }
+#endif
 
   // FIXME: It would be nice to have the widget position at the time
   // of the event, but it's relatively unlikely that the widget has
@@ -7884,16 +7931,25 @@
     mozilla::widget::CompositorWidgetInitData* aInitData) {
   // Make sure the window XID is propagated to X server, we can fail otherwise
   // in GPU process (Bug 1401634).
+#ifdef MOZ_X11
   if (mXDisplay && mXWindow != X11None) {
     XFlush(mXDisplay);
   }
+#endif
 
   bool isShaped =
       mIsTransparent && !mHasAlphaVisual && !mTransparencyBitmapForTitlebar;
+#ifdef MOZ_X11
   *aInitData = mozilla::widget::GtkCompositorWidgetInitData(
       (mXWindow != X11None) ? mXWindow : (uintptr_t) nullptr,
       mXDisplay ? nsCString(XDisplayString(mXDisplay)) : nsCString(), isShaped,
       mIsX11Display, GetClientSize());
+#else
+  *aInitData = mozilla::widget::GtkCompositorWidgetInitData(
+      (uintptr_t) nullptr,
+      nsCString(), isShaped,
+      mIsX11Display, GetClientSize());
+#endif
 }
 
 #ifdef MOZ_WAYLAND
--- dom/ipc/ContentChild.cpp	2020-01-18 05:34:15.000000000 +0800
+++ dom/ipc/ContentChild.cpp	2020-01-18 05:34:15.000000000 +0800
@@ -5,7 +5,9 @@
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 
 #ifdef MOZ_WIDGET_GTK
+#ifdef MOZ_X11
 #  include <gdk/gdkx.h>
+#endif
 #  include <gtk/gtk.h>
 #endif
 
--- toolkit/components/remote/moz.build	2020-02-04 17:22:38.467180939 +0800
+++ toolkit/components/remote/moz.build	2020-02-04 17:22:38.467180939 +0800
@@ -13,12 +13,15 @@
 
 if CONFIG["MOZ_WIDGET_TOOLKIT"] == "gtk":
     SOURCES += [
-        "nsGTKRemoteServer.cpp",
         "nsUnixRemoteServer.cpp",
-        "nsXRemoteClient.cpp",
-        "nsXRemoteServer.cpp",
         "RemoteUtils.cpp",
     ]
+    if CONFIG["MOZ_X11"]:
+        SOURCES += [
+            "nsGTKRemoteServer.cpp",
+            "nsXRemoteClient.cpp",
+            "nsXRemoteServer.cpp",
+        ]
     if CONFIG["MOZ_ENABLE_DBUS"]:
         SOURCES += [
             "nsDBusRemoteClient.cpp",
--- toolkit/moz.configure	2020-01-18 05:35:24.000000000 +0800
+++ toolkit/moz.configure	2020-01-18 05:35:24.000000000 +0800
@@ -314,10 +314,6 @@
     return toolkit == "gtk"
 
 
-set_config("MOZ_X11", True, when=toolkit_gtk)
-set_define("MOZ_X11", True, when=toolkit_gtk)
-add_old_configure_assignment("MOZ_X11", True, when=toolkit_gtk)
-
 # Wayland support
 # ==============================================================
 wayland_headers = pkg_check_modules(
--- gfx/gl/moz.build	2020-01-18 05:34:21.000000000 +0800
+++ gfx/gl/moz.build	2020-01-18 05:34:21.000000000 +0800
@@ -15,6 +15,8 @@
 elif CONFIG["MOZ_WIDGET_TOOLKIT"] == "gtk":
     if CONFIG["MOZ_EGL_XRENDER_COMPOSITE"]:
         gl_provider = "EGL"
+    elif CONFIG["MOZ_WAYLAND"]:
+        gl_provider = "EGL"
     else:
         gl_provider = "GLX"
 elif CONFIG["MOZ_WIDGET_TOOLKIT"] == "android":
--- gfx/cairo/cairo/src/moz.build	2020-11-18 05:25:18.000000000 +0800
+++ gfx/cairo/cairo/src/moz.build	2020-11-18 05:25:18.000000000 +0800
@@ -70,7 +70,7 @@
     SOURCES += [
         'cairo-beos-surface.cpp',
     ]
-elif CONFIG['MOZ_WIDGET_TOOLKIT'] == 'gtk':
+elif CONFIG['MOZ_WIDGET_TOOLKIT'] == 'gtk' and CONFIG['MOZ_X11']:
     EXPORTS.cairo += [
         'cairo-ps.h',
     ]
--- gfx/thebes/moz.build	2020-11-18 05:25:18.000000000 +0800
+++ gfx/thebes/moz.build	2020-11-18 05:25:18.000000000 +0800
@@ -119,7 +119,6 @@
     ]
     EXPORTS.mozilla.gfx += [
         "PrintTargetPDF.h",
-        "PrintTargetPS.h",
     ]
     SOURCES += [
         "gfxFcPlatformFontList.cpp",
@@ -128,17 +127,18 @@
         "gfxGdkNativeRenderer.cpp",
         "gfxPlatformGtk.cpp",
         "PrintTargetPDF.cpp",
-        "PrintTargetPS.cpp",
     ]
 
     if CONFIG["MOZ_X11"]:
         EXPORTS += [
             "gfxXlibNativeRenderer.h",
             "gfxXlibSurface.h",
+            "PrintTargetPS.h",
         ]
         SOURCES += [
             "gfxXlibNativeRenderer.cpp",
             "gfxXlibSurface.cpp",
+            "PrintTargetPS.cpp",
         ]
 
 elif CONFIG["MOZ_WIDGET_TOOLKIT"] == "windows":
--- widget/gtk/nsDeviceContextSpecG.cpp	2020-11-18 05:26:41.000000000 +0800
+++ widget/gtk/nsDeviceContextSpecG.cpp	2020-11-18 05:26:41.000000000 +0800
@@ -6,7 +6,6 @@
 #include "nsDeviceContextSpecG.h"
 
 #include "mozilla/gfx/PrintTargetPDF.h"
-#include "mozilla/gfx/PrintTargetPS.h"
 #include "mozilla/Logging.h"
 #include "mozilla/Services.h"
 
@@ -44,7 +43,6 @@
 using mozilla::gfx::IntSize;
 using mozilla::gfx::PrintTarget;
 using mozilla::gfx::PrintTargetPDF;
-using mozilla::gfx::PrintTargetPS;
 
 nsDeviceContextSpecGTK::nsDeviceContextSpecGTK()
     : mGtkPrintSettings(nullptr), mGtkPageSetup(nullptr) {}
@@ -117,13 +115,7 @@
     return PrintTargetPDF::CreateOrNull(stream, size);
   }
 
-  int32_t orientation;
-  mPrintSettings->GetOrientation(&orientation);
-  return PrintTargetPS::CreateOrNull(
-      stream, size,
-      orientation == nsIPrintSettings::kPortraitOrientation
-          ? PrintTargetPS::PORTRAIT
-          : PrintTargetPS::LANDSCAPE);
+  return nullptr;
 }
 
 #define DECLARE_KNOWN_MONOCHROME_SETTING(key_, value_) {"cups-" key_, value_},
