version="9.0.1"
nostrip=true
desc="LLVM compiler and its backend"
makedeps=["python", "cmake", "flex", "bison", "libffi", "libxml2", "libedit"]
deps=["python", "libffi", "libxml2", "libedit"]
source=[
	{url="https://github.com/llvm/llvm-project/releases/download/llvmorg-$version/llvm-$version.src.tar.xz"},
	{url="https://github.com/llvm/llvm-project/releases/download/llvmorg-$version/lldb-$version.src.tar.xz"},
	{url="https://github.com/llvm/llvm-project/releases/download/llvmorg-$version/lld-$version.src.tar.xz"},
	{url="https://github.com/llvm/llvm-project/releases/download/llvmorg-$version/clang-$version.src.tar.xz"},
	{url="https://github.com/llvm/llvm-project/releases/download/llvmorg-$version/clang-tools-extra-$version.src.tar.xz"},
	{url="https://github.com/llvm/llvm-project/releases/download/llvmorg-$version/compiler-rt-$version.src.tar.xz"},
	{url="enable-SSP-and-PIE-by-default.patch"},
	{url="llvm-001-musl.patch"},
	{url="llvm-config.h"}
]

ext='''
	cd clang-$version.src
	for i in $source;do
		case $i in
		clang*.patch) patch -p1 -i "$srcdir/$i";;
		esac
	done
	cd ..

	cd compiler-rt-$version.src
	for i in $source;do
		case $i in
		compiler-rt*.patch) patch -p1 -i "$srcdir/$i";;
		esac
	done
	cd ..

	cd lldb-$version.src
	for i in $source;do
		case $i in
		lldb*.patch) patch -p1 -i "$srcdir/$i";;
		esac
	done
	cd ..

	wrksrc="`pwd`/llvm-$version.src"
	mv clang-${version}.src ${wrksrc}/tools/clang
	mv lldb-${version}.src ${wrksrc}/tools/lldb
	mv clang-tools-extra-${version}.src ${wrksrc}/tools/clang/tools/extra
	mv compiler-rt-${version}.src ${wrksrc}/projects/compiler-rt
	mv lld-${version}.src ${wrksrc}/projects/lld
	sed -i 's/set(COMPILER_RT_HAS_SANITIZER_COMMON TRUE)/set(COMPILER_RT_HAS_SANITIZER_COMMON FALSE)/' ${wrksrc}/projects/compiler-rt/cmake/config-ix.cmake

	cd llvm-$version.src
	for i in $source;do
		case $i in
		llvm*.patch) patch -p1 -i "$srcdir/$i";;
		esac
	done
	rm test/tools/llvm-objdump/macho-compact-unwind-x86_64.test \
	test/tools/llvm-objdump/macho-compact-unwind-i386.test \
	test/Transforms/GlobalOpt/alias-used.ll \
	test/tools/llvm-symbolizer/print_context.c
'''

build='''
	cd llvm-$version.src
	mkdir -p build
	cd build

	cmake -G Ninja \
		-DCMAKE_BUILD_TYPE=Release \
		-DCMAKE_INSTALL_PREFIX= \
		-DLLVM_BINUTILS_INCDIR=/include \
		-DLLVM_BUILD_DOCS=YES \
		-DLLVM_BUILD_TESTS=OFF \
		-DLLVM_LINK_LLVM_DYLIB=ON \
		-DLLVM_BUILD_LLVM_DYLIB=ON \
		-DLLVM_INSTALL_UTILS=ON \
		-DLLVM_ENABLE_FFI=YES \
		-DLLVM_ENABLE_RTTI=YES \
		-DLLVM_ENABLE_ZLIB=YES \
		-DLLDB_DISABLE_PYTHON=YES \
		-DLLVM_APPEND_VC_REV=NO \
		-DLLVM_DEFAULT_TARGET_TRIPLE="$TARGET" \
		-DLLVM_TARGETS_TO_BUILD='X86;AMDGPU;BPF' \
		-DFFI_INCLUDE_DIR="$(pkg-config --cflags-only-I libffi | sed 's|^-I||g')" \
		..
	
	ninja
	DESTDIR="$pkgdir" ninja install

	install -d "$pkgdir"/lib/bfd-plugins
	ln -s ../LLVMgold.so "$pkgdir"/lib/bfd-plugins/LLVMgold.so

	mv "$pkgdir"/include/llvm/Config/llvm-config.h "$pkgdir"/include/llvm/Config/llvm-config-64.h
	install -m 0644 "$srcdir"/llvm-config.h "$pkgdir"/include/llvm/Config/

	mv "$pkgdir"/libexec/ccc-analyzer "$pkgdir/lib/clang/"
	mv "$pkgdir"/libexec/c++-analyzer "$pkgdir/lib/clang/"
	rmdir "$pkgdir/libexec"
	sed -i 's|libexec|lib/clang|' "$pkgdir/bin/scan-build"
'''
